import type { CameraData, LocalStorageData, Polygon, TableItem } from '../types';

const STORAGE_KEY = 'polygon_editor_cameras';
const STORAGE_VERSION = 1;

export class CameraStorageService {
  private static getStorageData(): LocalStorageData {
    try {
      const data = localStorage.getItem(STORAGE_KEY);
      if (!data) return {};
      return JSON.parse(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:', error);
      return {};
    }
  }

  private static saveStorageData(data: LocalStorageData): void {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage:', error);
    }
  }

  static saveCameraData(
    cameraId: string,
    polygons: Polygon[],
    tableItems: TableItem[]
  ): void {
    const allData = this.getStorageData();

    allData[cameraId] = {
      cameraId,
      polygons: polygons.filter(p => p.closed), // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
      tableItems,
      lastSaved: new Date().toISOString(),
      version: STORAGE_VERSION,
    };

    this.saveStorageData(allData);
    console.log(`üîÑ –î–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã ${cameraId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage`);
  }

  static loadCameraData(cameraId: string): CameraData | null {
    const allData = this.getStorageData();
    const cameraData = allData[cameraId];

    if (!cameraData) {
      console.log(`üì• –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage`);
      return null;
    }

    console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã ${cameraId} –∏–∑ localStorage:`, {
      polygons: cameraData.polygons.length,
      linkedPolygons: cameraData.polygons.filter(p => p.linkedItem).length,
      lastSaved: cameraData.lastSaved
    });

    return cameraData;
  }

  static clearCameraData(cameraId: string): void {
    const allData = this.getStorageData();
    delete allData[cameraId];
    this.saveStorageData(allData);
    console.log(`üóëÔ∏è –î–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã ${cameraId} —É–¥–∞–ª–µ–Ω—ã –∏–∑ localStorage`);
  }

  static deleteCameraPoligon(cameraId: string, polygonId: string): void {
    const allData = this.getStorageData();
    const cameraData = allData[cameraId];
    if (!cameraData) return;

    cameraData.polygons = cameraData.polygons.filter(p => p.id !== polygonId);
    cameraData.tableItems = cameraData.tableItems.map(item =>
      item.linkedPolygon === polygonId ? { ...item, linkedPolygon: null } : item
    );

    this.saveStorageData(allData);
    console.log(`üóëÔ∏è –ü–æ–ª–∏–≥–æ–Ω ${polygonId} —É–¥–∞–ª–µ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä—ã ${cameraId}`);
  }

  static getAllCameraIds(): string[] {
    const allData = this.getStorageData();
    return Object.keys(allData);
  }

  static getCameraDataSize(cameraId: string): number {
    const cameraData = this.loadCameraData(cameraId);
    if (!cameraData) return 0;

    try {
      return new Blob([JSON.stringify(cameraData)]).size;
    } catch {
      return 0;
    }
  }
}
