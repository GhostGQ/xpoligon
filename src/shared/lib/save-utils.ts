import type { Polygon, TableItem, SaveData } from '../types';

export const prepareSaveData = (
  polygons: Polygon[],
  tableItems: TableItem[]
): SaveData => {
  const completedPolygons = polygons.filter(p => p.closed);
  const linkedPolygons = completedPolygons.filter(p => p.linkedItem !== null);
  const unlinkedPolygons = completedPolygons.filter(p => p.linkedItem === null);

  const linkedPairs = linkedPolygons.map(polygon => {
    const linkedTable = tableItems.find(item => item.id === polygon.linkedItem);
    return {
      polygonId: polygon.id,
      tableItemId: polygon.linkedItem!,
      tableItemName: linkedTable?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç'
    };
  });

  return {
    polygons: completedPolygons,
    tableItems,
    linkedPairs,
    metadata: {
      totalPolygons: completedPolygons.length,
      linkedPolygons: linkedPolygons.length,
      unlinkedPolygons: unlinkedPolygons.length,
      savedAt: new Date().toISOString()
    }
  };
};

export const logSaveData = (saveData: SaveData): void => {
  console.group('üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
  
  console.log('üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', {
    '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤': saveData.metadata.totalPolygons,
    '–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã': saveData.metadata.linkedPolygons,
    '–ù–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã': saveData.metadata.unlinkedPolygons,
    '–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è': saveData.metadata.savedAt
  });

  console.log('üîó –ü—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª–∏–≥–æ–Ω-—ç–ª–µ–º–µ–Ω—Ç:', saveData.linkedPairs.map(pair => ({
    polygonId: pair.polygonId,
    elementName: pair.tableItemName
  })));

  console.log('üìê –ü–æ–ª–∏–≥–æ–Ω—ã:', saveData.polygons.map(polygon => ({
    id: polygon.id,
    pointsCount: polygon.points.length,
    isLinked: polygon.linkedItem !== null,
    linkedTo: polygon.linkedItem
  })));

  console.log('üè∑Ô∏è –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö:', saveData);
  
  console.groupEnd();
};
